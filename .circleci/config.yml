version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udaPeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udaPeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migration:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: ${memstash_token}" --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID})
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm i
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm i
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udaPeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

            url=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicDnsName" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)

            curl -H "Content-Type: text/plain" -H "token: ${memstash_token}" \
              --request PUT \
              --data $url https://api.memstash.io/values/url-${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udaPeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/project/.circleci/ansible/
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["35:91:05:36:6a:3d:ef:98:81:b5:89:5c:a9:91:39:ce"] 
      - attach_workspace:
          at: ~/project/.circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure   

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          working_directory: backend
          command: |
            npm i
            npm run migrations >> migrations.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." migration.txt
            then
            curl -H "Content-Type: text/plain" -H "token: ${memstash_token}" \
            --request PUT \
            --data "1" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7}
            else
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "0" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7}
            fi
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          working_directory: frontend
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs 
            npm install --global webpack
            npm install -D webpack-cli
      - run:
          name: Get backend url
          working_directory: frontend
          command: |
            BACKEND_IP=$(curl -H "token: ${memstash_token}" --request GET https://api.memstash.io/values/url-${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL=$API_URL" > .env

      - run:
          name: Deploy frontend objects
          working_directory: frontend
          command: |
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure   

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["35:91:05:36:6a:3d:ef:98:81:b5:89:5c:a9:91:39:ce"] 
      - attach_workspace:
          at: ~/project/.circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
            apk add --update tar
      - run:
          name: Deploy backend
          command: |
            tar -czvf backend.tar.gz backend
            ansible-playbook .circleci/ansible/deploy-backend.yml -i .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    environment:
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: ${memstash_token}" --request GET https://api.memstash.io/values/url-${CIRCLE_WORKFLOW_ID:0:7})
            curl http://${BACKEND_IP}:3030/api/status
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      - destroy-environment
      - revert-migration

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
           
            echo Old Workflow Id: ${OldWorkflowID}


            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "udaPeople-cloudfront" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"

            
            echo "$STACKS[*]"
            
            if [[ " ${STACKS[@]} " =~ " ${OldWorkflowID} " ]]; then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udaPeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udaPeople-frontend-${OldWorkflowID}"
            fi

      # Here's where you will add some code to rollback on failure  


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: main
      - configure-infrastructure :
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend :
          requires: [run-migrations]
      - smoke-test :
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
